package kr.co.dothome.qandi.chapter04;

public class Chapter0402 {
	public static void main(String[] args) {
		/*----------------------------------------------------------------------------------------
		 * 	Chapter04-02	메모리 사용 영역
		 * 	
		 * 	java.exe로 JVM이 시작되면 JVM은 운영체제에서 할당 받은 메모리 영역(Runtime Data Area)를 세뷰영역으로 구분해서사용
		 * 
		 * 	메소드(Method) 영역
		 * 	메소드 영역에는 코드에서 사동되는 클래스(~.class)들을 클래스 로더로 읽어 
		 *  클래스별로 런타임 상수풀(runtime constant pool),필드(field) 데이터,메소드(method) 데이터, 메소드 코드, 생성자(contructor)코드 등을 분류해서 저정
		 *  메소드 영역은 JVM이 시작할 때 생성되고 모든 스레드가 공유하는 영역
		 *  
		 *  힙(Heap) 영역
		 *  힙영역은 객체와 배열이 생성되는 영역. 힙 영역에 생성된 객체와 배열은 JVM 스택 영역의 변수나 다른 객체의 필드에서 참조
		 *  참조하는 변수나 필드가 없다면 의미없는 객체가 되기 때문에 이것을 쓰레기로 취급하고 JVM은 
		 *  쓰레기 수집기(Garbage Collector)를 실행 시켜 쓰레기 객체를 힙 영역에서 자동으로 제거
		 *  
		 *  JVM 스택(Stack) 영역
		 *  JVM 스택 영역은 각 스레드마다 하나씩 존재하며 스레드가 시작될 때 할당된다.
		 *  자바 프로그램에서 추가적으로 스레드를 생성하지 않았다면 main 스레드만 존재하므로 JVM 스택도 하나이다.
		 *  JVM 스택은 메소드를 호출할 때마다 프레임(Frame)을 추가(push)하고 메소드가 종료되면 해달 프레임을 제거(pop)하는 동작을 수행.
		 *  예외 발생시 printStackTrace()메소드로 보여주는 Stack Trace의 각 라인은 하나의 프레임을 표현한다.
		 *  프레임 내부에는 로컬변수 스택이 있는데, 기본 타입 변수와 참조 타입 변수가 추가(push)되거나 제거(pop)된다. 
		 *  변수가 이 영역에 생성되는 시점은 초기화가 될 때, 즉 최초로 변수에 값이 저장될 때이다. 
		 *  변수는 선언된 블록 안에서만 스택에 존재하고 블록을 벗어나면 스택에서 제거된다.
		 ----------------------------------------------------------------------------------------*/
	}
}
