package kr.co.dothome.qandi.chapter04;

public class Chapter0406 {
	public static void main(String[] args) {
		/*----------------------------------------------------------------------------------------
		 * 	Chapter04-06	배열 타입
		 * 	
		 * 	배열은 같은 타입의 데이터를 연속된 공간에 나열시키고, 각 데이터에 인덱스(index)를 부여해 놓은 자료구조이다.
		 * 	
		 * 	배열은 같은 타입의 데이터만 저장할 수 있다.
		 * 	배열은 선언과 동시에 저장할 수 있는 데이터 타입이 결정된다.
		 * 	만약 다른 타입의 값을 저장하려고 하면 타입 불일치(Type mismatch) 컴파일 오류가 발생한다.
		 * 	한 번 생성된 배열은 길이를 늘리거나 줄일 수 없다.
	 	----------------------------------------------------------------------------------------*/	
		
		/*---------------------------------------------------------------------------------------
		 * 	Chapter04-06-02		배열 선언
		 * 
		 * 	배열 변수 선언은 다음과 같이 두 가지 형태로 작성할 수 있다.
		 * 	타입[] 변수;	타입 변수[];
		 * 	대괄호 []는 배열 변수를 선언하는 기호로 사용되는데, 타입 뒤에 붙을수도 있고 변수 뒤에 붙을 수도 있다. 
		 * 	타입은 배열에 저장될 데이터의 타입을 말한다.
		 * 	
		 * 	배열 변수는 참조 변수에 속한다. 배열도 객체이므로 힙 영역에 생성되고 배열 변수는 힙 영역의 배열 객체를 참조하게 된다.
		 * 	참조할 배열 객체가 없다면 배열 변수는 null 값으로 초기화 될수 있다.
		 ---------------------------------------------------------------------------------------*/
		
		/*---------------------------------------------------------------------------------------
		 * 	Chapter04-06-03		값 목록으로 배열 생성
		 * 
		 * 	배열 항목에 값의 목록이 있다면 다음과 같이 간단하게 배열 객체를 만들 수 있다.
		 * 	데이터 타입[] 변수 = {값0, 값1, 값2......};
		 * 	이렇게 생성된 배열에서 값을 읽을 땐 
		 * 	변수[index]; 로 읽을수 있다. ex) 변수[0] == 값0;
		 * 	값을 바꾸고 싶다면 변수[index] = 바꿀값; 으로 대입할수 있다.
		 * 
		 * 	값의 목록으로 배열 객체를 생성할 때 주의할 점이 있는데, 
		 * 	배열 변수를 이미 선언한 후에 다른 실행문에서 중괄호를 사용한 배열생성은 허용되지 않는다.
		 * 
		 * 	배열 변수를 미리 선언한 후, 값 목록들이 나중에 결정되는 상황이라면 다음과 같으 new 연산자를 사용해서 값 목록을 지정해 주면된다.
		 * 	new 연산자 바로 뒤에는 배열 변수 선언에서 사용한 "타입[]"를 붙여주고 중괄호 {}에는 값들을 나열해주면 된다. 
		 * 
		 * 	타입[] 변수;
		 * 	변수 = new 타입[]{값0,값1,값2....};
		 * 
		 ---------------------------------------------------------------------------------------*/
		
		int[] scores;
		scores = new int[] {83, 90, 87};
		int sum1 = 0;
		for(int i=0; i<3; i++) {
			sum1 += scores[i];
		}
		System.out.println("총합 : "+sum1);
		//리턴된 총합을 sum2에 저장
		
		int sum2 = add(new int[] {83, 90, 87});
		System.out.println("총합 : "+sum2);
		System.out.println();
		
		/*---------------------------------------------------------------------------------------
		 * 	Chapter04-06-04		new 연산자로 배열 상성
		 * 
		 * 	값의 목록을 가지고 있지 않지만, 향후 값들을 저장할 배열을 미리 만들고 싶다면 new 연산자로 다음과 같이 배열 객체를 생성시킬수있다.
		 * 	타입[] 변수 = new 타입[길이];
		 * 	길이는 배열이 저장할 수 있는 값의 수를 말한다. new 연산자로 배열을 생성할 경우에는 이미 배열 변수가 선언된 후에도 가능하다.
		 * 	타입[] 변수 = null;
		 * 	변수 = new 타입[길이];
		 * 
		 * 	다음은 길이 5인 int[] 배열을 생성한다.
		 * 	int[] intArray[] = new int[5];
		 * 	자바는 intArray[0]~intArray[4]까지 값이 저장될 수 있는 공간을 확보하고, 배열의 생성 번지를 리턴한ㄴ다.
		 * 	리턴된 번지는 intArray 변수에 저장된다. 각각 항목ㅇ 크기는 int 타입의 크기인 4byte이다.
		 * 
		 * 	new 연산자로 배열을 처음 생성할 경우, 배열은 자동적으로 기본값으로 초기화 된다.
		 * 	
		 * 	타입별 배열의 초기값
		 * 	---------------------------------------------------------------------------------------
		 * 	분류				데이터 타입			초기값
		 * 	---------------------------------------------------------------------------------------
		 * 	기본 타입(정수)		byte[]				0
		 * 						char[]				'\u0000'
		 * 						short[]				0
		 * 						int[]				0
		 * 						long[]				0
		 * 	---------------------------------------------------------------------------------------
		 * 	기본 타입(실수)		float[]				0.0f
		 * 						double[]			0.0
		 * 	---------------------------------------------------------------------------------------
		 * 	기본 타입(논리)		boolean[]			false
		 * 	---------------------------------------------------------------------------------------
		 * 	참조타입			클래스[]			null
		 * 						인터페이스[]		null
		 * 	---------------------------------------------------------------------------------------
		 * 
		 * 	배열이 생성되고 나서 새로운 값을 저장하려면 대입 연산자를 사용하면된다.
		 * 	변수[인덱스] = 값;
		 ---------------------------------------------------------------------------------------*/
		
		int arr1[] = new int[3];
		
		for(int i = 0; i<3; i++) {
			System.out.println("arr1["+i+"] : "+arr1[i]);
		}
		
		arr1[0] = 10;
		arr1[1] = 20;
		arr1[2] = 30;
		
		for(int i = 0; i<3; i++) {
			System.out.println("arr1["+i+"] : "+arr1[i]);
		}
		
		double arr2[] = new double[3];
		
		for(int i = 0; i<3; i++) {
			System.out.println("arr2["+i+"] : "+arr2[i]);
		}
		
		arr2[0] = 0.1;
		arr2[1] = 0.2;
		arr2[2] = 0.3;
		
		for(int i = 0; i<3; i++) {
			System.out.println("arr2["+i+"] : "+arr2[i]);
		}
		
		String[] arr3 = new String[3];
		
		for(int i = 0; i<3; i++) {
			System.out.println("arr3["+i+"] : "+arr3[i]);
		}
		
		arr3[0] = "1월";
		arr3[1] = "2월";
		arr3[2] = "3월";
		
		for(int i = 0; i<3; i++) {
			System.out.println("arr3["+i+"] : "+arr3[i]);
		}
		
		/*---------------------------------------------------------------------------------------
		 * 	Chapter04-06-05		배열 길이
		 * 
		 * 	배열의 길이란 배열에 저장할 수 있는 전체 항목 수를 말한다. 
		 * 	코드에서 배열의 길이를 얻으려면 배열객체의 length필드를 읽으면 된다. 
		 * 	필드는 객체내부의 데이터를 말한다.
		 * 	배열의 length필드를 읽기 위해서는 배열 변수에 도트(.) 연산자를 붙이고 length를 적어주면 된다.
		 * 
		 * 	length 필드는 읽기 전용 필드이기 때문에 값을 바꿀수가 없다
		 * 
		 * 	배열의 length 필드는 for문을 사용해서 배열 전체를 루필할 때 매우 유용하게 사용할 수 있다.
		 ---------------------------------------------------------------------------------------*/
		
		
		
	}
	
	public static int add(int[] scores) {
		int sum = 0;
		for(int i = 0; i<3; i++) {
			sum += scores[i];
		}
		return sum;
	}
}
