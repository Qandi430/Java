/**
 *   chapter 01 변수와 타입 
 *           02 타입
 *           
 */
package kr.co.dothome.qandi.chapter01;

public class Chapter0102 {

	public static void main(String[] args) {
		
		/*-------------------------------------------
		   1. 기본 원시 타입
		      정수, 실수, 문자, 논리 리터럴을 저장하는 타입
		      종류        
		      정수 타입 = byte :	1byte/8 bit 		-128~127까지 저장 최대값(127)	
		                  char : 	2byte / 16bit		
		                  short :  	2byte / 16bit
		                  int : 	4byte / 32bit
		                  long :	8byte / 64bit
		      
		      실수타입 = float : 	4byte / 32bit
		      			 double : 	8byte / 64bit
		      논리타입 = boolean : 	true / false
		      
		    2. 	
		 --------------------------------------------*/
		/*-------------------------------------------
		 	정수 타입
		 	byte :	1byte/8 bit 		-128~127까지 저장 최대값(127)	
		 --------------------------------------------*/
		
		byte var1 = -128;
		byte var2 = -30;
		byte var3 = 0;
		byte var4 = 30;
		byte var5 = 127;
		//byte var6 = 128; //컴파일 에러
		
		byte var6 = 125;
		int var7 = 125;
		for(int i = 0; i<5; i++) {
			var6++;
			var7++;
			System.out.println("var6 : "+var6+"\t var7 : "+var7);
		}
		/*
			출력 결과
		  		var6 : 126	var7 : 126 
		  		var6 : 127	var7 : 127 
		  		var6 : -128	var7 : 128 
		  		var6 : -127	var7 : 129 
		  		var6 : -125	var7 : 130 // byte변수는 127을 넘어서는 순간 최고값인 -128부터 가시 저장됨
		 */ 
		
		/*-------------------------------------------
	 	char : 	2byte / 16bit		
	 	자바는 모든 문자를 유니코드(Unicode)로 처리
	 	유니코드는 0~65535 범위의 2byte크기를가니정수값	
	 --------------------------------------------*/
		
		char char1 = 'A'; //유니코드 : 0x0041 => 2진수 00000000 01000001
		char char2 = 'B'; //유니코드 : 0x0042 => 2진수 00000000 01000010
		char char3 = '가'; //유니코드 : 0xAC00 => 2진수 10101100 00000000
		char char4 = '각'; //유니코드 : 0xAC01 => 2진수 10101100 01000001
		
		// char변수에 작은 따옴표(')로 감싼 문자가 아닌 직접 유니코드 정수값 저장 가능
		// 16진수로 저장할경우 유니코드라는 의미에서 '\+u'+16진수값을 저장
		
		char char5 = 65; //A
		char char6 = '\u0041'; //A
		
		//프로그램 코드에서 char 변수에 저장된 유니코드를 알고 싶다면 char 타입 변수를 int 타입 변수에 저장하면 된다.
		
		char c = 'A';
		int unicode = c;
		System.out.println(unicode); //출력 값 : 65
		//char char7 = ''; //컴파일 에러
		char char7 = ' ';// 공백불가 공백(유니코드:32) 하나 포함해야함
		
		/*--------------------------------------------------------
		 * 	short	2byte/16bit
		 *  		-32,768~32,767 숫자 저장 가능
		 *  		C언어와 호환을 위해사용 자바에서는 잘사용하지 않음
		 ---------------------------------------------------------*/
		/*--------------------------------------------------------
		 * 	int		4byte/32bit
		 *  		-2,147,483,648~2,147,483,647 숫자 저장 가능
		 *  		8진수 일 경우 0을앞에 붙이면 되고 16진수이면 0x를 붙이면 됨
		 ---------------------------------------------------------*/
		 int number = 10; 		//10
		 int octNumber = 012;	//10
		 int hexNumber = 0xA;	//10

		 /*--------------------------------------------------------
		  *  long	8byte/64bit
		  *  		-9,223,372,036,854,775,808~9,223,372,036,854,775,807 숫자 저장 가능
		  *  		long 타입 변수를 초기화 할때 정수값뒤에 소문자'l' 또는 대문자 'L'을 붙일수 있다
		  *  		int 타입의 저장 범위를 넘어서는 큰 정수는 반드시 소문자'l' 또는 대문자 'L'을 붙여야한다.
		  ---------------------------------------------------------*/
		 
		 long long1 = 10;
		 long long2 = 20L;
		 //long long3 = 100000000000000000; //컴파일 에러 
		 long long4 = 100000000000000000L;
		 
		 /*-------------------------------------------
		 	실수 타입
		 	실수는 정수와 다르게 부동 소수점 방식으로 저장 
		 	float 타입과 double 타입은 가수와 지수를 저장하기 위해 전체 bit를 나누어 사용
		 	
		 	float : 부호(1bit) + 지수(8bit) + 가수(23bit) = 4byte
		 	double : 부호(1bit) + 지수(11bit) + 가수(52bit) = 8byte
		 	일반적으로 float 보다 double이 더 정밀한 값을 저장할수 있기 떄문에 double를 사용한다.
		 	float타입에 저장하려면 리터럴뒤에 소문자'f' 또는 대문자'F'를 붙여야한다.
		 --------------------------------------------*/
		 double d1 = 3.14;
		 //float f1 = 3.14;// 컴파일 에러 'F' 가 없음
		 float f1 = 3.14f;
		 
		 //만약 정수 리터럴에 10의지수를 나타내는 E 또는 e 를 포함하고 이쓰면 실수타입 변수에 저장헤야된다.
		 int i1 = 3000000; //3000000
		 double d2 = 3e6; //3000000
		 float f2 = 3e6f; //3000000 
		 double d3 = 2e-3; //0.002
		 
		 /*-------------------------------------------
		 	논리 타입
		 	boolean 타입은 1byte(8bit)로 표현되는 논리값(true/false) 를 저장
		 	조건문, 제어문 등에 사용
		 --------------------------------------------*/
		 boolean stop = true;
		 if(stop) {
			 System.out.println("중지 합니다.");
		 }else {
			 System.out.println("시작합니다.");
		 }
		 //출력값 중지합니다.
	}
}
